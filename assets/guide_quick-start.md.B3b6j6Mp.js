import{_ as a,c as o,o as t,ae as i}from"./chunks/framework.U1Gow_7P.js";const p=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"guide/quick-start.md","filePath":"en/guide/quick-start.md"}'),r={name:"guide/quick-start.md"};function s(l,e,n,c,d,h){return t(),o("div",null,e[0]||(e[0]=[i('<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h1><h2 id="editor-plugins" tabindex="-1">Editor Plugins <a class="header-anchor" href="#editor-plugins" aria-label="Permalink to &quot;Editor Plugins&quot;">​</a></h2><p>clice implements the <a href="https://microsoft.github.io/language-server-protocol" target="_blank" rel="noreferrer">Language Server Protocol</a>. Any editor that supports this protocol can theoretically work with clice to provide features like <code>code completion</code>, <code>diagnostics</code>, <code>go-to-definition</code>, and more.</p><p>However, beyond the standard protocol, clice also supports some protocol extensions. For better handling of these protocol extensions and better integration with editors, using clice plugins in specific editors is often a better choice. Most of them work out of the box and support clice&#39;s protocol extensions.</p><h3 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h3><h3 id="vim-neovim" tabindex="-1">Vim/Neovim <a class="header-anchor" href="#vim-neovim" aria-label="Permalink to &quot;Vim/Neovim&quot;">​</a></h3><h3 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;Others&quot;">​</a></h3><p>Other editors don&#39;t have available clice plugins yet (contributions welcome!). To use clice in them, please install clice yourself and refer to the specific editor&#39;s documentation on how to use a language server.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>If your editor plugin handles clice&#39;s download, you can skip this step.</p><h3 id="download-prebuilt-binary" tabindex="-1">Download Prebuilt Binary <a class="header-anchor" href="#download-prebuilt-binary" aria-label="Permalink to &quot;Download Prebuilt Binary&quot;">​</a></h3><p>Download clice binary version through the Release page.</p><h3 id="build-from-source" tabindex="-1">Build from Source <a class="header-anchor" href="#build-from-source" aria-label="Permalink to &quot;Build from Source&quot;">​</a></h3><p>Build clice from source yourself. For specific steps, refer to <a href="./../dev/build.html">build</a>.</p><h2 id="project-setup" tabindex="-1">Project Setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project Setup&quot;">​</a></h2><p>For clice to correctly understand your code (e.g., find header file locations), you need to provide clice with a <code>compile_commands.json</code> file, also known as a <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html" target="_blank" rel="noreferrer">compilation database</a>. The compilation database provides compilation options for each source file.</p><h3 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h3><p>For build systems using cmake, add the <code>-DCMAKE_EXPORT_COMPILE_COMMANDS=ON</code> option during build, for example:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span></span></code></pre></div><p>This will generate a <code>compile_commands.json</code> file in the <code>build</code> directory.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note: This option only works when cmake&#39;s generator is set to makefile and ninja. For other generators, this option will be ignored, meaning the compilation database cannot be generated.</p></div><h3 id="bazel" tabindex="-1">Bazel <a class="header-anchor" href="#bazel" aria-label="Permalink to &quot;Bazel&quot;">​</a></h3><p>Bazel has no native support to generate a compilation database. The recommended solution is to use <a href="https://github.com/hedronvision/bazel-compile-commands-extractor" target="_blank" rel="noreferrer">bazel-compile-commands-extractor</a>. After setting it up, you can generate <code>compile_commands.json</code> with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bazel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @hedron_compile_commands//:refresh_all</span></span></code></pre></div><h3 id="visual-studio" tabindex="-1">Visual Studio <a class="header-anchor" href="#visual-studio" aria-label="Permalink to &quot;Visual Studio&quot;">​</a></h3><p>TODO:</p><h3 id="makefile" tabindex="-1">Makefile <a class="header-anchor" href="#makefile" aria-label="Permalink to &quot;Makefile&quot;">​</a></h3><p>TODO:</p><h3 id="xmake" tabindex="-1">Xmake <a class="header-anchor" href="#xmake" aria-label="Permalink to &quot;Xmake&quot;">​</a></h3><h3 id="others-1" tabindex="-1">Others <a class="header-anchor" href="#others-1" aria-label="Permalink to &quot;Others&quot;">​</a></h3><p>For any other build system, you can try using <a href="https://github.com/rizsotto/Bear" target="_blank" rel="noreferrer">bear</a> or <a href="https://github.com/rizsotto/scan-build" target="_blank" rel="noreferrer">scan-build</a> to intercept compilation commands and obtain the compilation database (no guarantee of success). We plan to write a <strong>new tool</strong> in the future that captures compilation commands through a fake compiler approach.</p>',31)]))}const m=a(r,[["render",s]]);export{p as __pageData,m as default};
