import{_ as t,c as o,o as a,ae as d}from"./chunks/framework.D8webtH5.js";const m=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"guide/configuration.md","filePath":"en/guide/configuration.md"}'),c={name:"guide/configuration.md"};function r(i,e,n,l,h,s){return a(),o("div",null,e[0]||(e[0]=[d('<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>This is the documentation for <code>clice.toml</code>.</p><h2 id="project" tabindex="-1">Project <a class="header-anchor" href="#project" aria-label="Permalink to &quot;Project&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>project.cache_dir</code></td><td><code>string</code></td><td><code>&quot;${workspace}/.clice/cache&quot;</code></td></tr></tbody></table><p>Folder for storing PCH and PCM caches. <br></p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>project.index_dir</code></td><td><code>string</code></td><td><code>&quot;${workspace}/.clice/index&quot;</code></td></tr></tbody></table><p>Folder for storing index files. <br></p><h2 id="rule" tabindex="-1">Rule <a class="header-anchor" href="#rule" aria-label="Permalink to &quot;Rule&quot;">​</a></h2><p><code>[[rules]]</code> represents an array of objects, where each object has the following properties: <br></p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th></tr></thead><tbody><tr><td><code>[rules].patterns</code></td><td><code>array</code> of <code>string</code></td></tr></tbody></table><p>Glob patterns for matching file paths, following LSP&#39;s <a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFilter" target="_blank" rel="noreferrer">standard</a>.</p><ul><li><code>*</code>: Matches one or more characters in a path segment.</li><li><code>?</code>: Matches a single character in a path segment.</li><li><code>**</code>: Matches any number of path segments, including zero.</li><li><code>{}</code>: Used for grouping conditions (e.g., <code>**/*.{ts,js}</code> matches all TypeScript and JavaScript files).</li><li><code>[]</code>: Declares a character range to match in a path segment (e.g., <code>example.[0-9]</code> matches <code>example.0</code>, <code>example.1</code>, etc.).</li><li><code>[!...]</code>: Excludes a character range to match in a path segment (e.g., <code>example.[!0-9]</code> matches <code>example.a</code>, <code>example.b</code>, but not <code>example.0</code>). <br></li></ul><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>[rules].append</code></td><td><code>array</code> of <code>string</code></td><td><code>[]</code></td></tr></tbody></table><p>Commands to append to the original command list. For example, <code>append = [&quot;-std=c++17&quot;]</code>. <br></p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>[rules].remove</code></td><td><code>array</code> of <code>string</code></td><td><code>[]</code></td></tr></tbody></table><p>Commands to remove from the original command list. For example, <code>remove = [&quot;-std=c++11&quot;]</code>. <br></p>',16)]))}const u=t(c,[["render",r]]);export{m as __pageData,u as default};
